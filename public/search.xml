<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git学习</title>
    <url>/2022/03/05/Git%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>毕业设计需要，学习git进行项目管理，版本迭代，跟踪项目记录</p>
<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>
<p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>
<p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>
<p>版本控制工具：Git、SVN、CVS…</p>
<span id="more"></span>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol>
<li><p>集中式</p>
<p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p>
</li>
<li><p>Git为分布式版本控制</p>
<p>每个人都拥有全部的代码！安全隐患！</p>
<p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p>
<p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p>
</li>
</ol>
<blockquote>
<p>选择合适的版本进行下载（阿里云镜像）<a href="http://npm.taobao.org/mirrors/git-for-windows/"></a></p>
</blockquote>
<h1 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h1><p><code>git config -l</code></p>
<pre class="language-none"><code class="language-none">git config --global user.name &quot;kuangshen&quot;  #名称
git config --global user.email yourQQnum@qq.com   #邮箱</code></pre>

<h1 id="基本理论"><a href="#基本理论" class="headerlink" title="基本理论"></a>基本理论</h1><blockquote>
<p>工作区域</p>
</blockquote>
<p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。</p>
<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><p><code>git add .</code></p>
<p><code>git commit -m &quot;message&quot;</code></p>
<p><code>git push</code></p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang指针简介</title>
    <url>/2023/05/11/Golang%E6%8C%87%E9%92%88%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>对于指针的简单理解。</p>
<span id="more"></span>

<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>表示数据的内存<strong>地址</strong></p>
<pre class="language-golang" data-language="golang"><code class="language-golang">var name string &#x3D; &quot;chenkaixuan&quot;

&#x2F;&#x2F; 声明一个 字符串的指针类型 的变量，值为 name 对应的内存地址
var pointer *string &#x3D; &amp;name

&#x2F;&#x2F; eg:
var age int &#x3D; 18
var x *int &#x3D; &amp;age</code></pre>

<blockquote>
<p>总结  *x 取对应的值 18 </p>
</blockquote>
<p><img data-src="/2023/05/11/Golang%E6%8C%87%E9%92%88%E7%AE%80%E4%BB%8B/image-20230511213831292.png"></p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>eg1:</p>
<pre class="language-golang" data-language="golang"><code class="language-golang">package main

import &quot;fmt&quot;

func changeData(data string) &#123;
	data &#x3D; &quot;haha&quot;
&#125;

func main() &#123;
	name :&#x3D; &quot;chenkaixuan&quot;
	&#x2F;&#x2F;本质上会将name的值拷贝一份，并赋值给data
	changeData(name)
	fmt.Println(name)
&#125;
</code></pre>

<pre class="language-golang" data-language="golang"><code class="language-golang">package main

import &quot;fmt&quot;

func changeData(ptr *string) &#123;
	*ptr &#x3D; &quot;haha&quot;
&#125;

func main() &#123;
	name :&#x3D; &quot;chenkaixuan&quot;
	changeData(&amp;name)
	fmt.Println(name)
&#125;
</code></pre>

<p>eg2:</p>
<pre class="language-golang" data-language="golang"><code class="language-golang">package main

import &quot;fmt&quot;

func main() &#123;
	var username string
	fmt.Println(&quot;请输入用户名：&quot;)
	fmt.Scanf(&quot;%s&quot;, &amp;username)

	if username &#x3D;&#x3D; &quot;chenkaixuan&quot; &#123;
		fmt.Println(&quot;success&quot;)
	&#125; else &#123;
		fmt.Println(&quot;fail&quot;)
	&#125;
&#125;
</code></pre>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA一键清除断点</title>
    <url>/2020/11/21/IDEA%E4%B8%80%E9%94%AE%E6%B8%85%E9%99%A4%E6%96%AD%E7%82%B9/</url>
    <content><![CDATA[<p>关于一键清除IDEA中的断点</p>
<span id="more"></span>

<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><p>在进行程序的debug时需要设置断点，之后把断点清除的时候不需要一个一个断点进行点击，可以快捷操作。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>1、点开<code>View Breakpoints..</code></p>
<img data-src="/2020/11/21/IDEA%E4%B8%80%E9%94%AE%E6%B8%85%E9%99%A4%E6%96%AD%E7%82%B9/image-20201121162128194.png" class="">

<p>2、选中全部断点，并点击<code>-</code> 符号</p>
<img data-src="/2020/11/21/IDEA%E4%B8%80%E9%94%AE%E6%B8%85%E9%99%A4%E6%96%AD%E7%82%B9/image-20201121162514926.png" class="">

<p>3、点击Done即可设置成功</p>
]]></content>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/2020/09/06/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>在2019年下半年的时候已经进行了博客的搭建，由于之后电脑重装系统，未进行blog文件的备份，导致数据丢失，如今再次进行搭建，记录搭建博客的过程。  </p>
<span id="more"></span>

<blockquote>
<p>注：Windows环境下。可参考 <a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a>  </p>
</blockquote>
<hr>
<h2 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一. 环境搭建"></a>一. 环境搭建</h2><p>1.在官网下载<a href="https://nodejs.org/en/">node.js</a>，之后进行安装。<br>2.Win+r之后输入cmd打开命令行窗口：  </p>
<ul>
<li><code>node -v</code> <em>查看node版本</em>  </li>
<li><code>npm -v</code> <em>查看npm版本</em></li>
<li><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code> <em>安装淘宝的cnpm 管理器</em> ，加快安装速度。</li>
<li><code>cnpm -v</code> <em>查看cnpm版本</em>  </li>
<li><code>cnpm install -g hexo-cli</code> <em>安装hexo框架</em>  </li>
<li><code>hexo -v</code> <em>查看hexo版本</em>  </li>
<li><code>mkdir blog</code> <em>创建blog目录</em> （在自己选择的磁盘位置下）</li>
</ul>
<hr>
<h2 id="二-hexo"><a href="#二-hexo" class="headerlink" title="二. hexo"></a>二. hexo</h2><p>1.建站<br>安装完hexo后，在blog文件夹下执行命令: </p>
<ul>
<li><code>hexo init</code> 	<em>生成博客 初始化博客</em></li>
<li><code>hexo s</code>		<em>启动本地博客服务</em></li>
</ul>
<p>2.配置 </p>
<ul>
<li><code>hexo new &quot;我的第一篇博客&quot;</code> <em>生成博客文章《我的第一篇博客》</em> <strong>我的第一篇博客.md</strong> </li>
<li><code>hexo g</code>     <em>generate 生成</em>一下</li>
<li><code>hexo s</code> 启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a> 这时可以打开浏览器登录localhost:4000 查看博客页面。</li>
</ul>
<hr>
<h2 id="三-配置"><a href="#三-配置" class="headerlink" title="三. 配置"></a>三. 配置</h2><p>1.在GitHub上创建仓库：<strong>YourGitHubName.github.io</strong></p>
<p>​	<em><strong>注意：是你的GitHub的名字</strong></em></p>
<p>2.<code>cnpm install --save hexo-deployer-git</code> <em>在blog目录下安装git部署插件</em> </p>
<p>3.修改**_config.yml**文件：</p>
<ul>
<li>配置_config.yml</li>
</ul>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span>
<span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span>
<span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/YourGitHubName/YourGitHubName.github.io.git
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre>

<p>4.命令行操作：</p>
<ul>
<li><p><code>hexo clean</code>	<em>清理一下</em></p>
</li>
<li><p><code>hexo</code>      <em>部署到Github仓库里</em>       <a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a>  访问这个地址可以查看博客</p>
</li>
</ul>
<p>5.主题美化：</p>
<ul>
<li><p><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code>	*下载 <strong>yilia</strong>主题到本地*</p>
</li>
<li><p>修改hexo根目录下的 _config.yml 文件 ： theme: yilia</p>
</li>
<li><p><code>hexo clean</code>	<em>清理一下</em></p>
</li>
<li><p><code>hexo g</code>	<em>生成</em></p>
</li>
<li><p><code>hexo d</code>	<em>部署到远程Github仓库</em> </p>
</li>
<li><p><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a>  <em>查看博客</em></p>
</li>
</ul>
<hr>
<p>在搭建的过程中遇到任何问题，可以在搜索引擎上查找相应的解决方案。如果出现任何意外情况，都可以删掉<strong>blog</strong>文件夹重来。</p>
<p><strong>具体可参考：</strong></p>
<p><a href="https://www.bilibili.com/video/BV1Yb411a7ty/">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a> </p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA中.java文件标红问题</title>
    <url>/2020/11/08/IDEA%E4%B8%AD-java%E6%96%87%E4%BB%B6%E6%A0%87%E7%BA%A2%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="关于处理IDEA中Java文件标红问题"><a href="#关于处理IDEA中Java文件标红问题" class="headerlink" title="关于处理IDEA中Java文件标红问题"></a>关于处理IDEA中Java文件标红问题</h1><span id="more"></span>
<ul>
<li><p>问题描述：<br>前不久在IDEA中安装插件leetcode时，设置模板后，点击题目生成的文件为.java文件，但文件标红：  </p>
  <img data-src="/2020/11/08/IDEA%E4%B8%AD-java%E6%96%87%E4%BB%B6%E6%A0%87%E7%BA%A2%E9%97%AE%E9%A2%98/%E6%A0%87%E7%BA%A2.png" class=""></li>
</ul>
<p>不能进行调试。<br>而正常的情况应该是这样的：<br>    <img data-src="/2020/11/08/IDEA%E4%B8%AD-java%E6%96%87%E4%BB%B6%E6%A0%87%E7%BA%A2%E9%97%AE%E9%A2%98/%E6%AD%A3%E5%B8%B8.png" class=""><br>很明显，项目下的src目录，前者为普通文件，而后面的才是我们熟知的蓝色src文件夹。  </p>
<ul>
<li>解决方法：</li>
</ul>
<ol>
<li>点击IDEA界面右上角的图标：  <img data-src="/2020/11/08/IDEA%E4%B8%AD-java%E6%96%87%E4%BB%B6%E6%A0%87%E7%BA%A2%E9%97%AE%E9%A2%98/%E5%9B%BE%E6%A0%87.png" class=""></li>
<li>点击界面中的src文件夹，之后点击上方的蓝色的Sources按钮：  <img data-src="/2020/11/08/IDEA%E4%B8%AD-java%E6%96%87%E4%BB%B6%E6%A0%87%E7%BA%A2%E9%97%AE%E9%A2%98/result.png" class="">  </li>
<li>点击OK。</li>
</ol>
<p>文件变成正常的蓝色，即可进行调试，问题解决。</p>
]]></content>
      <tags>
        <tag>IDEA</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础</title>
    <url>/2020/11/07/Redis%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>学习非关系型数据库：Redis，同时了解NoSql的基本思想、Redis的基础命令以及Redis和Java的连接（jedis）。</p>
<span id="more"></span>

<hr>
<h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><p>Redis是一款高性能的NoSql系列的非关系型数据库</p>
<h3 id="1-1什么是NoSql"><a href="#1-1什么是NoSql" class="headerlink" title="1.1什么是NoSql"></a>1.1什么是NoSql</h3><p>​		NoSQL(NoSQL &#x3D; Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。<br>​		随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p>
<ul>
<li><p><strong>NoSql</strong>和<strong>关系型数据库</strong>比较</p>
<p><u><em><strong>缓存思想</strong></em></u></p>
</li>
</ul>
<h3 id="1-2下载安装"><a href="#1-2下载安装" class="headerlink" title="1.2下载安装"></a>1.2下载安装</h3><ul>
<li><p>官网下载</p>
</li>
<li><p>中文网下载：<a href="http://www.redis.cn/">http://www.redis.cn/</a></p>
</li>
<li><p>解压直接可以使用：</p>
<ul>
<li>redis.windows.conf：配置文件</li>
<li>redis-cli.exe：redis的客户端</li>
<li>redis-server.exe：redis服务器端</li>
</ul>
<p>双击对应的文件</p>
<img data-src="/2020/11/07/Redis%E5%9F%BA%E7%A1%80/image-20201106113405910.png" class="">

<img data-src="/2020/11/07/Redis%E5%9F%BA%E7%A1%80/image-20201106113424318.png" class="">

<blockquote>
<p>注：根据自己的电脑位数选择32位或者64位</p>
</blockquote>
</li>
</ul>
<h3 id="1-3命令操作"><a href="#1-3命令操作" class="headerlink" title="1.3命令操作"></a>1.3命令操作</h3><ul>
<li><p>存储结构：</p>
<p>key - value，其中key是字符串，value有5种不同的数据结构</p>
<ul>
<li>String: 字符串</li>
<li>Hash: 散列</li>
<li>List: 列表</li>
<li>Set: 集合</li>
<li>Sorted Set: 有序集合</li>
</ul>
</li>
</ul>
<h4 id="1-3-1字符串类型-string"><a href="#1-3-1字符串类型-string" class="headerlink" title="1.3.1字符串类型 string"></a>1.3.1字符串类型 string</h4><ul>
<li>存储: set key value</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> username ckx
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> age <span class="token number">10</span>
OK</code></pre>

<ul>
<li>获取: get key</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get username
<span class="token string">"ckx"</span></code></pre>

<ul>
<li>删除: del key</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> del age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> del c
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span></code></pre>

<h4 id="1-3-2哈希类型-hash"><a href="#1-3-2哈希类型-hash" class="headerlink" title="1.3.2哈希类型 hash"></a>1.3.2哈希类型 hash</h4><ul>
<li>存储: hset key field value</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hset myhash username ckx
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hset myhash password <span class="token number">123</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span></code></pre>

<ul>
<li><p>获取：</p>
<ul>
<li>hget key field: 获取指定的 field 对应的值</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hget myhash username
<span class="token string">"ckx"</span></code></pre>

<ul>
<li>hgetall key: 获取所有的field对应的值</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hgetall myhash
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"username"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"ckx"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"password"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"123"</span></code></pre>
</li>
<li><p>删除: hdel key field</p>
</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hdel myhash username
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hgetall myhash
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"password"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"123"</span></code></pre>

<h4 id="1-3-3列表类型-list"><a href="#1-3-3列表类型-list" class="headerlink" title="1.3.3列表类型 list"></a>1.3.3列表类型 list</h4><p>可以添加一个元素到列表的头部或者尾部</p>
<ul>
<li><p>添加：</p>
<ul>
<li><p>lpush key value: 将元素加入列表左表</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush myList a
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush myList b
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush myList c
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span></code></pre>
</li>
<li><p>rpush key value: 将元素加入列表右边</p>
</li>
</ul>
</li>
<li><p>获取：lrange key start end ：范围获取</p>
<ul>
<li>Redis Lrange 返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange myList <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"c"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"b"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"a"</span></code></pre>
</li>
<li><p>删除：</p>
<ul>
<li>lpop key： 删除列表最左边的元素，并将元素返回</li>
<li>rpop key： 删除列表最右边的元素，并将元素返回</li>
</ul>
</li>
</ul>
<h4 id="1-3-4集合类型-set"><a href="#1-3-4集合类型-set" class="headerlink" title="1.3.4集合类型 set"></a>1.3.4集合类型 set</h4><p>不允许重复元素</p>
<ul>
<li><p>存储：sadd key value</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset a
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset a
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span></code></pre>
</li>
<li><p>获取：smembers key:获取set集合中所有元素</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers myset
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"a"</span></code></pre>
</li>
<li><p>删除：srem key value:删除set集合中的某个元素</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> srem myset a
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span></code></pre></li>
</ul>
<h4 id="1-3-5有序集合类型-sorted-set"><a href="#1-3-5有序集合类型-sorted-set" class="headerlink" title="1.3.5有序集合类型 sorted set"></a>1.3.5有序集合类型 sorted set</h4><ul>
<li><p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。</p>
<p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>
<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>
</li>
<li><p>存储：zadd key score value</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd mysort <span class="token number">60</span> ckx1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd mysort <span class="token number">50</span> ckx2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd mysort <span class="token number">80</span> ckx3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span></code></pre>
</li>
<li><p>获取：zrange key start end [withscores]</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrange mysort <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"ckx2"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"ckx1"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"ckx3"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrange mysort <span class="token number">0</span> <span class="token parameter variable">-1</span> withscores
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"ckx2"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"50"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"ckx1"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"60"</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"ckx3"</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"80"</span></code></pre>
</li>
<li><p>删除：zrem key value</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrem mysort ckx1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span></code></pre></li>
</ul>
<h4 id="1-3-6通用命令"><a href="#1-3-6通用命令" class="headerlink" title="1.3.6通用命令"></a>1.3.6通用命令</h4><ul>
<li>keys * : 查询所有的键</li>
<li>type key ： 获取键对应的value的类型</li>
<li>del key：删除指定的key value</li>
</ul>
<hr>
<h2 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h2><h3 id="2-1持久化"><a href="#2-1持久化" class="headerlink" title="2.1持久化"></a>2.1持久化</h3><ul>
<li>redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</li>
</ul>
<h4 id="2-1-1持久化机制"><a href="#2-1-1持久化机制" class="headerlink" title="2.1.1持久化机制"></a>2.1.1持久化机制</h4><h5 id="RDB：默认方式"><a href="#RDB：默认方式" class="headerlink" title="RDB：默认方式"></a>RDB：默认方式</h5><p>1.编辑 redis.windows.conf 文件</p>
   <pre class="language-markup" data-language="markup"><code class="language-markup">#   after 900 sec (15 min) if at least 1 key changed
save 900 1
#   after 300 sec (5 min) if at least 10 keys changed
save 300 10
#   after 60 sec if at least 10000 keys changed
save 60 10000</code></pre>

<p>   <strong>15 分钟之后，如果有一个 key 改变，持久化一次</strong></p>
<p>2.在redis文件夹下选择命令行启动<strong>服务端</strong></p>
  <img data-src="/2020/11/07/Redis%E5%9F%BA%E7%A1%80/image-20201106171346559.png" class="">

<p>3.点击启动客户端进行测试</p>
  <img data-src="/2020/11/07/Redis%E5%9F%BA%E7%A1%80/image-20201106171750638.png" class="">

<p>4.数据内容存在文件夹下的<strong>dump.rbd</strong>文件</p>
<p>5.根据服务器的性能和需求进行配置</p>
<h5 id="AOF：日志记录"><a href="#AOF：日志记录" class="headerlink" title="AOF：日志记录"></a>AOF：日志记录</h5><p>1.编辑redis.windwos.conf文件</p>
   <pre class="language-bash" data-language="bash"><code class="language-bash">appendonly no（关闭aof） --<span class="token operator">></span> appendonly <span class="token function">yes</span> （开启aof）
<span class="token comment"># appendfsync always ： 每一次操作都进行持久化</span>
appendfsync everysec ： 每隔一秒进行一次持久化
<span class="token comment"># appendfsync no	 ： 不进行持久化</span></code></pre>

<p>2.如 RDB 方式进行启动、数据测试</p>
<p>3.数据内容存在文件夹下的<strong>appendonly.aof</strong>文件</p>
<hr>
<h2 id="三、Java客户端"><a href="#三、Java客户端" class="headerlink" title="三、Java客户端"></a>三、Java客户端</h2><h3 id="3-1-Jedis"><a href="#3-1-Jedis" class="headerlink" title="3.1 Jedis"></a>3.1 Jedis</h3><ul>
<li><p>一款Java操作redis数据库的工具</p>
</li>
<li><p>使用：导入jar包到项目中，编写测试代码</p>
</li>
</ul>
<img data-src="/2020/11/07/Redis%E5%9F%BA%E7%A1%80/image-20201106172858393.png" class="">

<p>测试代码  </p>
<img data-src="/2020/11/07/Redis%E5%9F%BA%E7%A1%80/image-20201106173510568.png" class="">

<ul>
<li><p>方法：</p>
<pre class="language-java" data-language="java"><code class="language-java">jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"activecode"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"hehe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span></code></pre>

<p>应用场所：给邮箱发激活码</p>
</li>
</ul>
<h3 id="3-2-Jedis-连接池"><a href="#3-2-Jedis-连接池" class="headerlink" title="3.2 Jedis 连接池"></a>3.2 Jedis 连接池</h3><ul>
<li><p>JedisPool</p>
</li>
<li><p>使用：</p>
<ol>
<li><p>测试</p>
<img data-src="/2020/11/07/Redis%E5%9F%BA%E7%A1%80/image-20201106174213475.png" class="">
</li>
<li><p>创建配置对象</p>
<pre class="language-Java" data-language="Java"><code class="language-Java">public void test02() &#123;
    &#x2F;**
     * 创建一个配置对象
     *&#x2F;
    JedisPoolConfig jedisPoolConfig &#x3D; new JedisPoolConfig();
    jedisPoolConfig.setMaxTotal(50);
    jedisPoolConfig.setMaxIdle(10);


    JedisPool jedisPool &#x3D; new JedisPool(jedisPoolConfig, &quot;localhost&quot;, 6379);
    Jedis jedis &#x3D; jedisPool.getResource();
    jedis.set(&quot;hello&quot;, &quot;world&quot;);
    jedis.close();
&#125;
</code></pre></li>
</ol>
</li>
</ul>
<h4 id="3-2-1-JedisPool-工具类"><a href="#3-2-1-JedisPool-工具类" class="headerlink" title="3.2.1 JedisPool 工具类"></a>3.2.1 JedisPool 工具类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPoolConfig</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @author 16396
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisPoolUtils</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JedisPool</span> jedisPool<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">InputStream</span> inputStreams <span class="token operator">=</span> <span class="token class-name">JedisPoolUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jedis.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStreams<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">JedisPoolConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"maxTotal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"maxIdle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jedis</span> <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">/**
     * 通过连接池工具类获取
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token class-name">JedisPoolUtils</span><span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Redis</tag>
        <tag>NoSql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装zsh</title>
    <url>/2023/05/26/Ubuntu%E5%AE%89%E8%A3%85zsh/</url>
    <content><![CDATA[<p>Ubuntu使用zsh+zim美化Terminal</p>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先对于shell是一个命令行解释器，用户输入一条命令，shell就立即解释执行。</p>
<p>常说的sh、bash就是shell解释器，进行安装的则是zsh。</p>
<p>Zsh有很多框架配置，常见的有oh-my-zsh，根据网上评论其运行流畅度会让用户难以忍受。于是采取安装Zim，并安装powerlevel10k进行主题配置。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h3><p>查看系统的shell</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells</code></pre>

<p>安装zsh</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">zsh</span>
<span class="token comment"># 修改为使用zsh</span>
chsh <span class="token parameter variable">-s</span> /bin/zsh
<span class="token comment"># 重启电脑</span>
<span class="token function">reboot</span></code></pre>

<p>重启之后查看是否在使用zsh</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span></code></pre>

<blockquote>
<p>之后需在<code>.zshrc</code>中配置</p>
</blockquote>
<h3 id="安装zim"><a href="#安装zim" class="headerlink" title="安装zim"></a>安装zim</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/zimfw/install/master/install.zsh <span class="token operator">|</span> <span class="token function">zsh</span></code></pre>

<h3 id="安装powerlevel10k"><a href="#安装powerlevel10k" class="headerlink" title="安装powerlevel10k"></a>安装powerlevel10k</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开.zimrc文件</span>
<span class="token function">vim</span> ~/.zimrc</code></pre>

<p>在文件中添加p10k</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">zmodule romkatv/powerlevel10k</code></pre>

<p>进行安装</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">zimfw <span class="token function">install</span></code></pre>

<p>最后进行配置</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">p10k configure
<span class="token comment"># 可通过该命令重新配置</span></code></pre>

<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>这里采用nerd font字体库</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span>
<span class="token function">git</span> clone https://github.com/ryanoasis/nerd-fonts.git <span class="token parameter variable">--depth</span> <span class="token number">1</span>
<span class="token builtin class-name">cd</span> nerd-fonts
./install.sh</code></pre>

<h3 id="配置字体为Hack-Nerd-Font"><a href="#配置字体为Hack-Nerd-Font" class="headerlink" title="配置字体为Hack Nerd Font"></a>配置字体为Hack Nerd Font</h3><p>在Ubuntu Terminal中Preferences中进行配置</p>
<p><img data-src="/2023/05/26/Ubuntu%E5%AE%89%E8%A3%85zsh/terminal.png"></p>
<p><img data-src="/2023/05/26/Ubuntu%E5%AE%89%E8%A3%85zsh/font.png"></p>
<h3 id="vscode终端"><a href="#vscode终端" class="headerlink" title="vscode终端"></a>vscode终端</h3><p>可以尝试修改<code>Editor: Font Family</code>中为字体名称 <strong>Hack Nerd Font Regular</strong></p>
<hr>
<p>参考 <a href="https://blog.csdn.net/MacwinWin/article/details/107806743#commentBox">漂亮的终端：zsh+zim+powerlevel10k+nerd font</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客图片显示</title>
    <url>/2023/05/11/hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p>解决hexo博客部署后，图片无法正常显示问题。（后续会采用图床解决）</p>
<span id="more"></span>

<blockquote>
<p>博客迁移，回忆之前解决方法，重新记录。</p>
</blockquote>
<p>1.安装插件</p>
<pre class="language-none"><code class="language-none">npm install hexo-renderer-marked --save</code></pre>

<p>2.在<code>config.yml</code>更改配置</p>
<pre class="language-none"><code class="language-none">post_asset_folder: true
marked:
  prependRoot: true
  postAsset: true</code></pre>

<p>设置post_asset_folder: true，使用hexo new命令创建新文章时，会生成文章同名的文件夹，将图片资源保存在该文件夹中。</p>
<p>3.使用<code>![image_name](image.png)</code>进行图片插入</p>
<p>参考资料 <a href="https://zhuanlan.zhihu.com/p/265077468">hexo博客如何插入图片</a></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
